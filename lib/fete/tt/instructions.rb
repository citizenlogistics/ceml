# Autogenerated from a Treetop grammar. Edits may be lost.


module Fete
module Instructions
  include Treetop::Runtime

  def root
    @root || :instructions
  end

  include Lexer

  def _nt_instructions
    start_index = index
    if node_cache[:instructions].has_key?(index)
      cached = node_cache[:instructions][index]
      @index = cached.interval.end if cached
      return cached
    end

    s0, i0 = [], index
    loop do
      r1 = _nt_instruction
      if r1
        s0 << r1
      else
        break
      end
    end
    if s0.empty?
      @index = i0
      r0 = nil
    else
      r0 = instantiate_node(Instructions,input, i0...index, s0)
    end

    node_cache[:instructions][start_index] = r0

    r0
  end

  module Instruction0

    INTERPOLATE_REGEX = /\|(\w+)\.?(\w+)?\|/

    def interpolate(env)
      text =~ INTERPOLATE_REGEX or return text
      text.gsub(INTERPOLATE_REGEX) do |m|
        var, role = *[$2, $1].compact
        env.expand(role, var) or return false
      end
    end

    def role;  id.text_value.to_sym; end
    def text;  super.text_value; end
    def var;   (!defined?(:about) || about.empty?) ? nil : about.varname.text_value; end
    def key;   var || text; end
    def cmd;
      text_value =~ /^ask/  and return :ask
      text_value =~ /^tell/ and return :tell
    end
  end

  def _nt_instruction
    start_index = index
    if node_cache[:instruction].has_key?(index)
      cached = node_cache[:instruction][index]
      @index = cached.interval.end if cached
      return cached
    end

    i0 = index
    r1 = _nt_ask_stmt
    if r1
      r0 = r1
      r0.extend(Instruction0)
    else
      r2 = _nt_tell_stmt
      if r2
        r0 = r2
        r0.extend(Instruction0)
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:instruction][start_index] = r0

    r0
  end

  module TellStmt0
    def ws
      elements[1]
    end

    def id
      elements[2]
    end

    def text
      elements[5]
    end

    def nl
      elements[6]
    end
  end

  def _nt_tell_stmt
    start_index = index
    if node_cache[:tell_stmt].has_key?(index)
      cached = node_cache[:tell_stmt][index]
      @index = cached.interval.end if cached
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('tell', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 4))
      @index += 4
    else
      terminal_parse_failure('tell')
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_ws
      s0 << r2
      if r2
        r3 = _nt_id
        s0 << r3
        if r3
          if has_terminal?(':', false, index)
            r4 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure(':')
            r4 = nil
          end
          s0 << r4
          if r4
            r6 = _nt_ws
            if r6
              r5 = r6
            else
              r5 = instantiate_node(SyntaxNode,input, index...index)
            end
            s0 << r5
            if r5
              r7 = _nt_text
              s0 << r7
              if r7
                r8 = _nt_nl
                s0 << r8
              end
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(TellStmt0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:tell_stmt][start_index] = r0

    r0
  end

  module AskStmt0
    def ws1
      elements[0]
    end

    def ws2
      elements[2]
    end

    def varname
      elements[3]
    end
  end

  module AskStmt1
    def ws
      elements[1]
    end

    def id
      elements[2]
    end

    def about
      elements[3]
    end

    def text
      elements[6]
    end

    def nl
      elements[7]
    end
  end

  def _nt_ask_stmt
    start_index = index
    if node_cache[:ask_stmt].has_key?(index)
      cached = node_cache[:ask_stmt][index]
      @index = cached.interval.end if cached
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('ask', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 3))
      @index += 3
    else
      terminal_parse_failure('ask')
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_ws
      s0 << r2
      if r2
        r3 = _nt_id
        s0 << r3
        if r3
          i5, s5 = index, []
          r6 = _nt_ws
          s5 << r6
          if r6
            if has_terminal?('re', false, index)
              r7 = instantiate_node(SyntaxNode,input, index...(index + 2))
              @index += 2
            else
              terminal_parse_failure('re')
              r7 = nil
            end
            s5 << r7
            if r7
              r8 = _nt_ws
              s5 << r8
              if r8
                r9 = _nt_id
                s5 << r9
              end
            end
          end
          if s5.last
            r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
            r5.extend(AskStmt0)
          else
            @index = i5
            r5 = nil
          end
          if r5
            r4 = r5
          else
            r4 = instantiate_node(SyntaxNode,input, index...index)
          end
          s0 << r4
          if r4
            if has_terminal?(':', false, index)
              r10 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure(':')
              r10 = nil
            end
            s0 << r10
            if r10
              r12 = _nt_ws
              if r12
                r11 = r12
              else
                r11 = instantiate_node(SyntaxNode,input, index...index)
              end
              s0 << r11
              if r11
                r13 = _nt_text
                s0 << r13
                if r13
                  r14 = _nt_nl
                  s0 << r14
                end
              end
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(AskStmt1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:ask_stmt][start_index] = r0

    r0
  end

end

class InstructionsParser < Treetop::Runtime::CompiledParser
  include Instructions
end

end
