# Autogenerated from a Treetop grammar. Edits may be lost.


module Fete
module Scripts
  include Treetop::Runtime

  def root
    @root || :scripts
  end

  include Lexer

  include Casting

  include Instructions

  def _nt_scripts
    start_index = index
    if node_cache[:scripts].has_key?(index)
      cached = node_cache[:scripts][index]
      @index = cached.interval.end if cached
      return cached
    end

    s0, i0 = [], index
    loop do
      r1 = _nt_script
      if r1
        s0 << r1
      else
        break
      end
    end
    if s0.empty?
      @index = i0
      r0 = nil
    else
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
    end

    node_cache[:scripts][start_index] = r0

    r0
  end

  def _nt_script
    start_index = index
    if node_cache[:script].has_key?(index)
      cached = node_cache[:script][index]
      @index = cached.interval.end if cached
      return cached
    end

    i0 = index
    r1 = _nt_script_with_title
    if r1
      r0 = r1
      r0.extend(Script)
    else
      r2 = _nt_script_with_instructions
      if r2
        r0 = r2
        r0.extend(Script)
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:script][start_index] = r0

    r0
  end

  module ScriptWithTitle0
    def title
      elements[1]
    end

    def casting_statement
      elements[2]
    end

    def instructions
      elements[3]
    end
  end

  def _nt_script_with_title
    start_index = index
    if node_cache[:script_with_title].has_key?(index)
      cached = node_cache[:script_with_title][index]
      @index = cached.interval.end if cached
      return cached
    end

    i0, s0 = index, []
    r2 = _nt_nl
    if r2
      r1 = r2
    else
      r1 = instantiate_node(SyntaxNode,input, index...index)
    end
    s0 << r1
    if r1
      r3 = _nt_title
      s0 << r3
      if r3
        r5 = _nt_casting_statement
        if r5
          r4 = r5
        else
          r4 = instantiate_node(SyntaxNode,input, index...index)
        end
        s0 << r4
        if r4
          r7 = _nt_instructions
          if r7
            r6 = r7
          else
            r6 = instantiate_node(SyntaxNode,input, index...index)
          end
          s0 << r6
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(ScriptWithTitle0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:script_with_title][start_index] = r0

    r0
  end

  module ScriptWithInstructions0
    def title
      elements[1]
    end

    def casting_statement
      elements[2]
    end

    def instructions
      elements[3]
    end
  end

  def _nt_script_with_instructions
    start_index = index
    if node_cache[:script_with_instructions].has_key?(index)
      cached = node_cache[:script_with_instructions][index]
      @index = cached.interval.end if cached
      return cached
    end

    i0, s0 = index, []
    r2 = _nt_nl
    if r2
      r1 = r2
    else
      r1 = instantiate_node(SyntaxNode,input, index...index)
    end
    s0 << r1
    if r1
      r4 = _nt_title
      if r4
        r3 = r4
      else
        r3 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r3
      if r3
        r6 = _nt_casting_statement
        if r6
          r5 = r6
        else
          r5 = instantiate_node(SyntaxNode,input, index...index)
        end
        s0 << r5
        if r5
          r7 = _nt_instructions
          s0 << r7
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(ScriptWithInstructions0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:script_with_instructions][start_index] = r0

    r0
  end

  module Title0
  end

  module Title1
    def value
      elements[1]
    end

    def nl
      elements[3]
    end
  end

  module Title2
    def value
        super.text_value.gsub(/\\"/, '"')
    end
  end

  def _nt_title
    start_index = index
    if node_cache[:title].has_key?(index)
      cached = node_cache[:title][index]
      @index = cached.interval.end if cached
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('"', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure('"')
      r1 = nil
    end
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        i3 = index
        if has_terminal?('\\"', false, index)
          r4 = instantiate_node(SyntaxNode,input, index...(index + 2))
          @index += 2
        else
          terminal_parse_failure('\\"')
          r4 = nil
        end
        if r4
          r3 = r4
        else
          i5, s5 = index, []
          i6 = index
          if has_terminal?('"', false, index)
            r7 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure('"')
            r7 = nil
          end
          if r7
            r6 = nil
          else
            @index = i6
            r6 = instantiate_node(SyntaxNode,input, index...index)
          end
          s5 << r6
          if r6
            if index < input_length
              next_character = index + input[index..-1].match(/\A(.)/um).end(1)
              r8 = instantiate_node(SyntaxNode,input, index...next_character)
              @index = next_character
            else
              terminal_parse_failure("any character")
              r8 = nil
            end
            s5 << r8
          end
          if s5.last
            r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
            r5.extend(Title0)
          else
            @index = i5
            r5 = nil
          end
          if r5
            r3 = r5
          else
            @index = i3
            r3 = nil
          end
        end
        if r3
          s2 << r3
        else
          break
        end
      end
      if s2.empty?
        @index = i2
        r2 = nil
      else
        r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      end
      s0 << r2
      if r2
        if has_terminal?('"', false, index)
          r9 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure('"')
          r9 = nil
        end
        s0 << r9
        if r9
          r10 = _nt_nl
          s0 << r10
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Title1)
      r0.extend(Title2)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:title][start_index] = r0

    r0
  end

end

class ScriptsParser < Treetop::Runtime::CompiledParser
  include Scripts
end

end
