# Autogenerated from a Treetop grammar. Edits may be lost.


module CEML
module Casting
  include Treetop::Runtime

  def root
    @root || :casting_statement
  end

  include Lexer

  module CastingStatement0
    def ws1
      elements[0]
    end

    def ws2
      elements[2]
    end

    def distance
      elements[3]
    end
  end

  module CastingStatement1
    def casting_method
      elements[0]
    end

    def ws
      elements[1]
    end

    def roles_phrase
      elements[2]
    end

    def within
      elements[3]
    end

    def nl
      elements[4]
    end
  end

  def _nt_casting_statement
    start_index = index
    if node_cache[:casting_statement].has_key?(index)
      cached = node_cache[:casting_statement][index]
      @index = cached.interval.end if cached
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_casting_method
    s0 << r1
    if r1
      r2 = _nt_ws
      s0 << r2
      if r2
        r3 = _nt_roles_phrase
        s0 << r3
        if r3
          i5, s5 = index, []
          r6 = _nt_ws
          s5 << r6
          if r6
            if has_terminal?('within', false, index)
              r7 = instantiate_node(SyntaxNode,input, index...(index + 6))
              @index += 6
            else
              terminal_parse_failure('within')
              r7 = nil
            end
            s5 << r7
            if r7
              r8 = _nt_ws
              s5 << r8
              if r8
                r9 = _nt_distance
                s5 << r9
              end
            end
          end
          if s5.last
            r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
            r5.extend(CastingStatement0)
          else
            @index = i5
            r5 = nil
          end
          if r5
            r4 = r5
          else
            r4 = instantiate_node(SyntaxNode,input, index...index)
          end
          s0 << r4
          if r4
            r10 = _nt_nl
            s0 << r10
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(CastingStatement,input, i0...index, s0)
      r0.extend(CastingStatement1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:casting_statement][start_index] = r0

    r0
  end

  def _nt_casting_method
    start_index = index
    if node_cache[:casting_method].has_key?(index)
      cached = node_cache[:casting_method][index]
      @index = cached.interval.end if cached
      return cached
    end

    i0 = index
    if has_terminal?('gather', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 6))
      @index += 6
    else
      terminal_parse_failure('gather')
      r1 = nil
    end
    if r1
      r0 = r1
    else
      if has_terminal?('teams of', false, index)
        r2 = instantiate_node(SyntaxNode,input, index...(index + 8))
        @index += 8
      else
        terminal_parse_failure('teams of')
        r2 = nil
      end
      if r2
        r0 = r2
      else
        if has_terminal?('nab', false, index)
          r3 = instantiate_node(SyntaxNode,input, index...(index + 3))
          @index += 3
        else
          terminal_parse_failure('nab')
          r3 = nil
        end
        if r3
          r0 = r3
        else
          @index = i0
          r0 = nil
        end
      end
    end

    node_cache[:casting_method][start_index] = r0

    r0
  end

  module RolesPhrase0
    def ws1
      elements[0]
    end

    def ws2
      elements[2]
    end

    def roles_phrase
      elements[3]
    end
  end

  module RolesPhrase1
    def role
      elements[0]
    end

    def more_roles
      elements[1]
    end
  end

  def _nt_roles_phrase
    start_index = index
    if node_cache[:roles_phrase].has_key?(index)
      cached = node_cache[:roles_phrase][index]
      @index = cached.interval.end if cached
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_role
    s0 << r1
    if r1
      i3, s3 = index, []
      r4 = _nt_ws
      s3 << r4
      if r4
        if has_terminal?('and', false, index)
          r5 = instantiate_node(SyntaxNode,input, index...(index + 3))
          @index += 3
        else
          terminal_parse_failure('and')
          r5 = nil
        end
        s3 << r5
        if r5
          r6 = _nt_ws
          s3 << r6
          if r6
            r7 = _nt_roles_phrase
            s3 << r7
          end
        end
      end
      if s3.last
        r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
        r3.extend(RolesPhrase0)
      else
        @index = i3
        r3 = nil
      end
      if r3
        r2 = r3
      else
        r2 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(CastingRoles,input, i0...index, s0)
      r0.extend(RolesPhrase1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:roles_phrase][start_index] = r0

    r0
  end

  module Distance0
    def number
      elements[0]
    end

    def distance_unit
      elements[2]
    end
  end

  module Distance1
    def meters
      number.text_value.to_f * case distance_unit.text_value
      when /^mi/; 1600; when /^k/;  1000; when /^m/;  1;
      when /^f/;  0.35; when /^b/;  200; else 1; end
    end
  end

  def _nt_distance
    start_index = index
    if node_cache[:distance].has_key?(index)
      cached = node_cache[:distance][index]
      @index = cached.interval.end if cached
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_number
    s0 << r1
    if r1
      r3 = _nt_ws
      if r3
        r2 = r3
      else
        r2 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r2
      if r2
        i4 = index
        if has_terminal?('miles', false, index)
          r5 = instantiate_node(SyntaxNode,input, index...(index + 5))
          @index += 5
        else
          terminal_parse_failure('miles')
          r5 = nil
        end
        if r5
          r4 = r5
        else
          if has_terminal?('mile', false, index)
            r6 = instantiate_node(SyntaxNode,input, index...(index + 4))
            @index += 4
          else
            terminal_parse_failure('mile')
            r6 = nil
          end
          if r6
            r4 = r6
          else
            if has_terminal?('mi', false, index)
              r7 = instantiate_node(SyntaxNode,input, index...(index + 2))
              @index += 2
            else
              terminal_parse_failure('mi')
              r7 = nil
            end
            if r7
              r4 = r7
            else
              if has_terminal?('km', false, index)
                r8 = instantiate_node(SyntaxNode,input, index...(index + 2))
                @index += 2
              else
                terminal_parse_failure('km')
                r8 = nil
              end
              if r8
                r4 = r8
              else
                if has_terminal?('kilometers', false, index)
                  r9 = instantiate_node(SyntaxNode,input, index...(index + 10))
                  @index += 10
                else
                  terminal_parse_failure('kilometers')
                  r9 = nil
                end
                if r9
                  r4 = r9
                else
                  if has_terminal?('k', false, index)
                    r10 = instantiate_node(SyntaxNode,input, index...(index + 1))
                    @index += 1
                  else
                    terminal_parse_failure('k')
                    r10 = nil
                  end
                  if r10
                    r4 = r10
                  else
                    if has_terminal?('meters', false, index)
                      r11 = instantiate_node(SyntaxNode,input, index...(index + 6))
                      @index += 6
                    else
                      terminal_parse_failure('meters')
                      r11 = nil
                    end
                    if r11
                      r4 = r11
                    else
                      if has_terminal?('m', false, index)
                        r12 = instantiate_node(SyntaxNode,input, index...(index + 1))
                        @index += 1
                      else
                        terminal_parse_failure('m')
                        r12 = nil
                      end
                      if r12
                        r4 = r12
                      else
                        if has_terminal?('ft', false, index)
                          r13 = instantiate_node(SyntaxNode,input, index...(index + 2))
                          @index += 2
                        else
                          terminal_parse_failure('ft')
                          r13 = nil
                        end
                        if r13
                          r4 = r13
                        else
                          if has_terminal?('feet', false, index)
                            r14 = instantiate_node(SyntaxNode,input, index...(index + 4))
                            @index += 4
                          else
                            terminal_parse_failure('feet')
                            r14 = nil
                          end
                          if r14
                            r4 = r14
                          else
                            if has_terminal?('f', false, index)
                              r15 = instantiate_node(SyntaxNode,input, index...(index + 1))
                              @index += 1
                            else
                              terminal_parse_failure('f')
                              r15 = nil
                            end
                            if r15
                              r4 = r15
                            else
                              if has_terminal?('blocks', false, index)
                                r16 = instantiate_node(SyntaxNode,input, index...(index + 6))
                                @index += 6
                              else
                                terminal_parse_failure('blocks')
                                r16 = nil
                              end
                              if r16
                                r4 = r16
                              else
                                if has_terminal?('block', false, index)
                                  r17 = instantiate_node(SyntaxNode,input, index...(index + 5))
                                  @index += 5
                                else
                                  terminal_parse_failure('block')
                                  r17 = nil
                                end
                                if r17
                                  r4 = r17
                                else
                                  @index = i4
                                  r4 = nil
                                end
                              end
                            end
                          end
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end
        s0 << r4
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Distance0)
      r0.extend(Distance1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:distance][start_index] = r0

    r0
  end

  module Role0
    def range
      elements[0]
    end

    def id
      elements[2]
    end
  end

  module Role1
    def name; id.text_value; end
    def min;  range.empty? ? 2 : range.min; end
    def max;  range.empty? ? 10000 : range.max; end
  end

  def _nt_role
    start_index = index
    if node_cache[:role].has_key?(index)
      cached = node_cache[:role][index]
      @index = cached.interval.end if cached
      return cached
    end

    i0, s0 = index, []
    r2 = _nt_range
    if r2
      r1 = r2
    else
      r1 = instantiate_node(SyntaxNode,input, index...index)
    end
    s0 << r1
    if r1
      r4 = _nt_ws
      if r4
        r3 = r4
      else
        r3 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r3
      if r3
        r5 = _nt_id
        s0 << r5
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Role0)
      r0.extend(Role1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:role][start_index] = r0

    r0
  end

  module Range0
    def number
      elements[1]
    end
  end

  module Range1
    def min
      elements[0]
    end

    def max
      elements[1]
    end
  end

  module Range2
    def min; super.text_value.to_i; end
    def max
        return min if super.empty?
        return 10000 if super.text_value == '+'
        return super.number.text_value.to_i
    end
  end

  def _nt_range
    start_index = index
    if node_cache[:range].has_key?(index)
      cached = node_cache[:range][index]
      @index = cached.interval.end if cached
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_number
    s0 << r1
    if r1
      i3 = index
      if has_terminal?('+', false, index)
        r4 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure('+')
        r4 = nil
      end
      if r4
        r3 = r4
      else
        i5, s5 = index, []
        if has_terminal?('-', false, index)
          r6 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure('-')
          r6 = nil
        end
        s5 << r6
        if r6
          r7 = _nt_number
          s5 << r7
        end
        if s5.last
          r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
          r5.extend(Range0)
        else
          @index = i5
          r5 = nil
        end
        if r5
          r3 = r5
        else
          @index = i3
          r3 = nil
        end
      end
      if r3
        r2 = r3
      else
        r2 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Range1)
      r0.extend(Range2)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:range][start_index] = r0

    r0
  end

end

class CastingParser < Treetop::Runtime::CompiledParser
  include Casting
end

end
