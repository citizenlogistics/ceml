# Autogenerated from a Treetop grammar. Edits may be lost.


module CEML
module Scripts
  include Treetop::Runtime

  def root
    @root ||= :scripts
  end

  include Lexer

  include Casting

  include Instructions

  module Scripts0
    def nl
      elements[0]
    end

    def script
      elements[1]
    end
  end

  module Scripts1
    def script
      elements[0]
    end

    def more
      elements[1]
    end
  end

  module Scripts2
    def list
        [script] + more.elements.map(&:script)
    end
  end

  def _nt_scripts
    start_index = index
    if node_cache[:scripts].has_key?(index)
      cached = node_cache[:scripts][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_script
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        i3, s3 = index, []
        r4 = _nt_nl
        s3 << r4
        if r4
          r5 = _nt_script
          s3 << r5
        end
        if s3.last
          r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
          r3.extend(Scripts0)
        else
          @index = i3
          r3 = nil
        end
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Scripts1)
      r0.extend(Scripts2)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:scripts][start_index] = r0

    r0
  end

  module FreeScripts0
    def scripts
      elements[1]
    end

  end

  def _nt_free_scripts
    start_index = index
    if node_cache[:free_scripts].has_key?(index)
      cached = node_cache[:free_scripts][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r2 = _nt_nl
    if r2
      r1 = r2
    else
      r1 = instantiate_node(SyntaxNode,input, index...index)
    end
    s0 << r1
    if r1
      r3 = _nt_scripts
      s0 << r3
      if r3
        r5 = _nt_nl
        if r5
          r4 = r5
        else
          r4 = instantiate_node(SyntaxNode,input, index...index)
        end
        s0 << r4
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(FreeScripts0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:free_scripts][start_index] = r0

    r0
  end

  module FreeScript0
    def script
      elements[1]
    end

  end

  def _nt_free_script
    start_index = index
    if node_cache[:free_script].has_key?(index)
      cached = node_cache[:free_script][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r2 = _nt_nl
    if r2
      r1 = r2
    else
      r1 = instantiate_node(SyntaxNode,input, index...index)
    end
    s0 << r1
    if r1
      r3 = _nt_script
      s0 << r3
      if r3
        r5 = _nt_nl
        if r5
          r4 = r5
        else
          r4 = instantiate_node(SyntaxNode,input, index...index)
        end
        s0 << r4
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(FreeScript0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:free_script][start_index] = r0

    r0
  end

  module Script0
    def title
      elements[0]
    end

    def nl1
      elements[1]
    end

    def casting_statement
      elements[2]
    end

    def nl2
      elements[3]
    end

    def instructions
      elements[4]
    end
  end

  module Script1
    def title
      elements[0]
    end

    def nl
      elements[1]
    end

    def instructions
      elements[2]
    end
  end

  module Script2
    def casting_statement
      elements[0]
    end

    def nl
      elements[1]
    end

    def instructions
      elements[2]
    end
  end

  module Script3
    def title
      elements[0]
    end

    def nl
      elements[1]
    end

    def casting_statement
      elements[2]
    end
  end

  module Script4
    def title
      elements[0]
    end

  end

  module Script5
  end

  def _nt_script
    start_index = index
    if node_cache[:script].has_key?(index)
      cached = node_cache[:script][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    i1 = index
    i2, s2 = index, []
    r3 = _nt_title
    s2 << r3
    if r3
      r4 = _nt_nl
      s2 << r4
      if r4
        r5 = _nt_casting_statement
        s2 << r5
        if r5
          r6 = _nt_nl
          s2 << r6
          if r6
            r7 = _nt_instructions
            s2 << r7
          end
        end
      end
    end
    if s2.last
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      r2.extend(Script0)
    else
      @index = i2
      r2 = nil
    end
    if r2
      r1 = r2
    else
      i8, s8 = index, []
      r9 = _nt_title
      s8 << r9
      if r9
        r10 = _nt_nl
        s8 << r10
        if r10
          r11 = _nt_instructions
          s8 << r11
        end
      end
      if s8.last
        r8 = instantiate_node(SyntaxNode,input, i8...index, s8)
        r8.extend(Script1)
      else
        @index = i8
        r8 = nil
      end
      if r8
        r1 = r8
      else
        i12, s12 = index, []
        r13 = _nt_casting_statement
        s12 << r13
        if r13
          r14 = _nt_nl
          s12 << r14
          if r14
            r15 = _nt_instructions
            s12 << r15
          end
        end
        if s12.last
          r12 = instantiate_node(SyntaxNode,input, i12...index, s12)
          r12.extend(Script2)
        else
          @index = i12
          r12 = nil
        end
        if r12
          r1 = r12
        else
          i16, s16 = index, []
          r17 = _nt_title
          s16 << r17
          if r17
            r18 = _nt_nl
            s16 << r18
            if r18
              r19 = _nt_casting_statement
              s16 << r19
            end
          end
          if s16.last
            r16 = instantiate_node(SyntaxNode,input, i16...index, s16)
            r16.extend(Script3)
          else
            @index = i16
            r16 = nil
          end
          if r16
            r1 = r16
          else
            r20 = _nt_instructions
            if r20
              r1 = r20
            else
              i21, s21 = index, []
              r22 = _nt_title
              s21 << r22
              if r22
                if has_terminal?('', false, index)
                  r23 = instantiate_node(SyntaxNode,input, index...(index + 0))
                  @index += 0
                else
                  terminal_parse_failure('')
                  r23 = nil
                end
                s21 << r23
              end
              if s21.last
                r21 = instantiate_node(SyntaxNode,input, i21...index, s21)
                r21.extend(Script4)
              else
                @index = i21
                r21 = nil
              end
              if r21
                r1 = r21
              else
                @index = i1
                r1 = nil
              end
            end
          end
        end
      end
    end
    s0 << r1
    if r1
      if has_terminal?('', false, index)
        r24 = instantiate_node(SyntaxNode,input, index...(index + 0))
        @index += 0
      else
        terminal_parse_failure('')
        r24 = nil
      end
      s0 << r24
    end
    if s0.last
      r0 = instantiate_node(Script,input, i0...index, s0)
      r0.extend(Script5)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:script][start_index] = r0

    r0
  end

  module Title0
  end

  module Title1
    def value
      elements[1]
    end

  end

  module Title2
    def title_value
        value.text_value.gsub(/\\"/, '"')
    end
  end

  def _nt_title
    start_index = index
    if node_cache[:title].has_key?(index)
      cached = node_cache[:title][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('"', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure('"')
      r1 = nil
    end
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        i3 = index
        if has_terminal?('\\"', false, index)
          r4 = instantiate_node(SyntaxNode,input, index...(index + 2))
          @index += 2
        else
          terminal_parse_failure('\\"')
          r4 = nil
        end
        if r4
          r3 = r4
        else
          i5, s5 = index, []
          i6 = index
          if has_terminal?('"', false, index)
            r7 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure('"')
            r7 = nil
          end
          if r7
            r6 = nil
          else
            @index = i6
            r6 = instantiate_node(SyntaxNode,input, index...index)
          end
          s5 << r6
          if r6
            if index < input_length
              r8 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure("any character")
              r8 = nil
            end
            s5 << r8
          end
          if s5.last
            r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
            r5.extend(Title0)
          else
            @index = i5
            r5 = nil
          end
          if r5
            r3 = r5
          else
            @index = i3
            r3 = nil
          end
        end
        if r3
          s2 << r3
        else
          break
        end
      end
      if s2.empty?
        @index = i2
        r2 = nil
      else
        r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      end
      s0 << r2
      if r2
        if has_terminal?('"', false, index)
          r9 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure('"')
          r9 = nil
        end
        s0 << r9
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Title1)
      r0.extend(Title2)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:title][start_index] = r0

    r0
  end

  module Instructions0
    def nl
      elements[0]
    end

    def instruction_stmt
      elements[1]
    end
  end

  module Instructions1
    def instruction_stmt
      elements[0]
    end

    def more
      elements[1]
    end
  end

  def _nt_instructions
    start_index = index
    if node_cache[:instructions].has_key?(index)
      cached = node_cache[:instructions][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_instruction_stmt
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        i3, s3 = index, []
        r4 = _nt_nl
        s3 << r4
        if r4
          r5 = _nt_instruction_stmt
          s3 << r5
        end
        if s3.last
          r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
          r3.extend(Instructions0)
        else
          @index = i3
          r3 = nil
        end
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(InstructionStatements,input, i0...index, s0)
      r0.extend(Instructions1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:instructions][start_index] = r0

    r0
  end

end

class ScriptsParser < Treetop::Runtime::CompiledParser
  include Scripts
end

end
