module CEML
grammar Instructions
    include Lexer

    rule basic_statement
        (ask_stmt / tell_stmt / assign_stmt / record_stmt / set_stmt / pick_stmt / seed_stmt / sync_stmt /
            replace_stmt / release_stmt)
    end

    rule instruction_stmt
        later:later? basic_statement {
            def delay
                later.duration.seconds if respond_to? :later and not later.empty?
            end

            def bytecode
                if delay
                    [[[role], :start_delay, delay], [[role], :complete_delay]] + elements[1].bytecode
                else
                    elements[1].bytecode
                end
            end
        }
    end

    rule later
        duration ws 'later' ','? ws
    end

    rule seed_stmt
        'seed' ws varname:id ws 'with' ws rolemap <BasicInstruction> {
            def roles
               rolemap.value.map do |x| x[:from].to_sym end
            end
            def bytecode
                [[roles, :seed, {:target => varname.text_value, :rolemap => rolemap.value}]]
            end
        }
    end

    rule record_stmt
        'record' ws id ws varname:id <BasicInstruction>
    end

    rule tell_stmt
        'tell' ws id ':' ws? text <BasicInstruction>
    end

    rule assign_stmt
        'assign' ws id ':' ws? text <BasicInstruction>
    end

    rule ask_stmt
        'ask' ws id about:(ws 're' ws varname:id)? ':' ws? text <BasicInstruction>
    end

    rule set_stmt
        'set' ws id ws varname:id ':' ws? text <BasicInstruction>
    end

    rule pick_stmt
        'pick' ws id ws varname:id ':' ws? text <BasicInstruction>
    end

    rule sync_stmt
        'sync' ws id <BasicInstruction>
    end

    rule release_stmt
        'release' ws id condition:condition? <BasicInstruction>
    end

    rule replace_stmt
        'replace' ws id condition:condition? <BasicInstruction>
    end

    rule condition
        ws type:('if' / 'unless') ws thing:id {
            def value
                [type.text_value.to_sym, thing.text_value.to_sym]
            end
        }
    end

end
end
